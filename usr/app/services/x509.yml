#######################################################################
#
# SERVICE DEFINITION FOR X509SERVICE
#
# The definition provided in this file is used by SG to compile a
# base class for the X509Service service. For a
# detailed explanation of configuration values, refer to the
# comments below.
#
# The service specified in this file will be compiled in the
# following Python module:
#
#   usr.app.services.x509
#
# To create the implementation for this service, edit its
# module at:
#
#   ./usr/app/services/x509/impl.py
#
#######################################################################

# Specifies the name of the service class. This value is also used
# to generate a module name, amongst other uses. Therefor, for correct
# operation of the SG compiler, this SHOULD NOT be changed.
name: X509Service


# Specifies the service layer. The SG identifies three types of services:
# application (app), domain and infrastructure (infra).
layer: app


# Defines the service implementation(s) that are used by the
# X509Service base class. It may also be used to inherit
# from mixin classes. The elements are qualified names to Python
# symbols e.g `sq.service.Service`.
bases:
- sq.service.Service


# This list specifies the methods that the service class publicly
# exposes. See the example below.
#
# methods:
# - name: my_method_name
#   parameters:
#   - name: foo
#   - name: bar
#     default: None
#   args: true
#   kwargs: true
#   doc:
#     heading: >
#       This is the opening line of the docstring for the
#       my_method_name service method. It is rendered before
#       the args block.
#     returns: >
#       The return value. See the Napoleon documentation.
#
# Note that parameters are compiled in the order they were defined,
# but parameters with defaults will always come after defaultless
# parameters in the method signature.
methods:
- name: principals_from_pem
  parameters:
  - name: pem
    type: list
    doc: >
      A byte-sequence containing an X.509 certificate in the
      PEM-encoding.
  args: no
  kwargs: no
  doc:
    heading: >
      Extract Principals from a X.509 client certificate.
    returns: >
      list
- name: email_from_san
  parameters:
  - name: crt
    type: cryptography.x509.Certificate
  args: no
  kwargs: no
  doc:
    heading: >
      Extract email addresses from the Subject Alternative Names (SANs).
    returns: >
      list of Principal objects
- name: email_from_subject
  parameters:
  - name: crt
  args: no
  kwargs: no
  doc:
    heading: >
      Extract the email address from the Subject Distinguished Name (DN)
    returns: >
      Principal
- name: fingerprint
  parameters:
  - name: crt
  args: no
  kwargs: no
  doc:
    heading: >
      Extract the fingerprint from a X.509 certificate.
    returns: >
      Principal
- name: distinguished_names
  parameters:
  - name: crt
  args: no
  kwargs: no
  doc:
    heading: >
      Return a tuple containing the Issuer Distinguished Name (DN)
      and the Subject DN.
    returns: >
      Principal
- name: keyid
  parameters:
  - name: crt
  args: no
  kwargs: no
  doc:
    heading: >
      Return the hex-encoded, SHA-256 hashed public key associated
      to the X.509 certificate
    returns:
      Principal

# A list containing dependencies from the inversion-of-control
# container that should be added to the base class as class
# properties. The elements in this list are mappings and must
# have the following structure:
#
#   require: the name of the dependency
#   desc: a description of this dependency and how it is
#     used by the service. This member is optional.
#   attname: the name of the attribute on the service class.
#
# Make sure that all dependencies listed here are injected either
# programmatically or using the configuration files in the
# ./etc/ioc.conf.d directory.
dependencies: []


# Specifies exception classes that the service will declare.
#
# Example:
#
# exceptions:
# - name: MyCustomException
#   base: sq.exceptions.ObjectDoesNotExist
#   doc: >
#     This exception is raised when an object that the service is
#     trying to lookup does not exist.
#
# If the `base` attribute is not defined, then the exception inherits
# from Exception.
exceptions:
- name: InvalidCertificate
  base: sq.exceptions.UnprocessableEntity
  description: null
